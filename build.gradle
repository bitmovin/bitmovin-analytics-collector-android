buildscript {
	ext.kotlin_version = '1.7.20'

	repositories {
		google()
		jcenter()
		maven { url "https://plugins.gradle.org/m2/" }
		maven { url 'https://artifacts.bitmovin.com/artifactory/public-releases' }
		mavenCentral()
	}

	dependencies {
		classpath 'com.android.tools.build:gradle:7.3.1'
		classpath "com.diffplug.spotless:spotless-plugin-gradle:5.9.0"
		classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.28.3"
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
		classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
		classpath 'org.jacoco:org.jacoco.core:0.8.6'

		classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.1.1"
		// NOTE: Do not place your application dependencies here; they belong
		// in the individual module build.gradle files
	}
}

plugins {
	id 'java'
	id 'jacoco'
	id "org.sonarqube" version "3.1.1"
}

apply from: './bitmovinpropertiesloader.gradle'

allprojects {
	repositories {
		mavenLocal()
		google()
		jcenter()
		maven { url 'https://artifacts.bitmovin.com/artifactory/public-releases' }
		maven {
			credentials {
				username bitmovinProperties.getProperty('artifactoryUser')
				password bitmovinProperties.getProperty('artifactoryPassword')
			}
			url 'https://bitmovin.jfrog.io/bitmovin/libs-snapshot-local/'
		}
		mavenCentral()
	}

	apply plugin: "com.diffplug.spotless"

	spotless {
		// optional: limit format enforcement to just the files changed by this feature branch
		// ratchetFrom 'origin/main'

		//    format 'misc', {
		//        // define the files to apply `misc` to
		//        target '*.gradle', '*.md', '.gitignore'
		//
		//        // define the steps to apply to those files
		//        trimTrailingWhitespace()
		//        indentWithTabs() // or spaces. Takes an integer argument if you don't like 4
		//        endWithNewline()
		//    }
		groovyGradle {
			target '**/*.gradle' // default target of groovyGradle
			greclipse()
		}
		kotlin {
			target '**/*.kt'
			targetExclude '**/collector-bitmovin-player-v1-example/**/Samples.kt',
					'**/collector-exoplayer-example/**/Samples.kt',
					'**/collector-exoplayer-v1-example/**/Samples.kt'

			// TODO Remove disabled rules and apply to develop
			ktlint("0.43.2").userData(["disabled_rules": "indent,import-ordering"])
			// has its own section below
			//			ktfmt()    // has its own section below
			//			prettier() // has its own section below
			//        licenseHeader '/* (C)$YEAR */' // or licenseHeaderFile
		}
		java {
			target '**/*.java'
			googleJavaFormat().aosp()
		}
	}

}

ext {
	developLocal = System.getProperty("developLocal", "true").toBoolean()
	packageGroupId = 'com.bitmovin.analytics'

	/** Not relevant for us as versionCode is used only by PlayStore to indicate updates of apps,
	 * but we publish artifacts to maven repositories
	 */
	versionCode = 122003

	/**
	 * In local development one version is used across all gradle modules. But in production/release,
	 * we set version property to '1.X' or '2.X' in 'publish.sh' script and based on that we release
	 * and publish correct collectors v1 or v2.
	 */
	version = System.getProperty("version", "0.0.0") + (developLocal ? '-local' : '')

	compileSdkVersion = 33
	minSdkVersion = 16
	targetSdkVersion = 33

	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
	jvmTarget = JavaVersion.VERSION_1_8.toString()

	bitmovinPlayer2Version = '2.70.0'
	bitmovinPlayerVersion = '3.25.1'

	exoplayerCollectorV1Version = '2.11.8'
	exoplayerVersion = '2.18.1'

	constraintLayoutVersion = '1.0.2'
	junitVersion = '4.12'
	testRunnerVersion = '1.0.1'
	espressoCoreVersion = '3.4.0'
	assertjCoreVersion = '3.11.1'
	mockitoCoreVersion = '3.5.0'
	androidXVersion = '1.1.0'
	junitXVersion = '1.1.3'
	constraintlayoutVersion = '2.1.3'
	multidexVersion = '2.0.1'
	mockkVersion = '1.10.6'
	imaSdkVersion = '3.19.4'
	playServicesAdsVersion = '19.3.0'
}

task createPrePushHook() {
	def gitHooksDirectory = new File("$project.rootDir/.git/hooks/")
	if (!gitHooksDirectory.exists()) gitHooksDirectory.mkdirs()
	def prePushHookFile = new File("$project.rootDir/.git/hooks", "pre-push")
	if (prePushHookFile.exists()) prePushHookFile.delete()
	prePushHookFile.text = """
    #!/bin/sh
	
	echo '[git hook] executing gradle spotlessCheck before push'
	
	oldsha=\$(git rev-parse -q --verify refs/stash)
	# stash any unstaged changes
	git stash save --keep-index --include-untracked
	newsha=\$(git rev-parse -q --verify refs/stash)
	
	# run the spotlessCheck with the gradle wrapper
	./gradlew spotlessCheck --daemon
	
	# store the last exit code in a variable
	RESULT=\$?
	
	# unstash the unstaged changes
	if [ "\$oldsha" != "\$newsha" ];
	then
		echo 'Popping stash as there have been changes before.' 
	  	git stash pop;
	fi
	
	# return the './gradlew spotlessCheck' exit code
	exit \$RESULT
"""
	"chmod +x .git/hooks/pre-push".execute()
}

sonarqube {
	properties {
		property "sonar.host.url", "https://sonar.bitmovin.com"
		property "sonar.projectName", "Analytics Collector Android"
		property "sonar.projectKey", "analytics-collector-android"
		property "sonar.tests", ["src/test/java"]
		property "sonar.test.inclusions", "**/*Test*/**"
		property "sonar.sourceEncoding", "UTF-8"
		property "sonar.sources", "src/main/java"
		property "sonar.exclusions", '**/*Test*/**,' +
				'*.json,' +
				'**/*test*/**,' +
				'**/.gradle/**,' +
				'**/R.class'
	}
}

project(":collector-exoplayer-example") {
	sonarqube {
		skipProject = true
	}
}
project(":collector-exoplayer-v1-example") {
	sonarqube {
		skipProject = true
	}
}
project(":collector-bitmovin-player-example") {
	sonarqube {
		skipProject = true
	}
}
project(":collector-bitmovin-player-v1-example") {
	sonarqube {
		skipProject = true
	}
}
