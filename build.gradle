buildscript {
    ext.kotlin_version = '1.9.23'

    repositories {
        mavenLocal()
        mavenCentral()
        google()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url 'https://artifacts.bitmovin.com/artifactory/public-releases' }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:8.7.0'
        classpath "com.diffplug.spotless:spotless-plugin-gradle:6.23.3"
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.33.1"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

plugins {
    id 'java'
    id 'jacoco'
    id "org.sonarqube" version "3.5.0.2730"
    id 'org.jetbrains.kotlinx.binary-compatibility-validator' version '0.16.3'
}

apply from: './bitmovinpropertiesloader.gradle'

allprojects {
    repositories {
        mavenLocal()
        mavenCentral()
        google()
        maven { url 'https://artifacts.bitmovin.com/artifactory/public-releases' }
        maven {
            credentials {
                username bitmovinProperties.getProperty('artifactoryUser')
                password bitmovinProperties.getProperty('artifactoryPassword')
            }
            url 'https://bitmovin.jfrog.io/bitmovin/libs-snapshot-local/'
        }

    }

    apply plugin: "com.diffplug.spotless"

    spotless {
        // only run on modified files
        ratchetFrom 'origin/main'

        format 'misc', {
            // define the files to apply `misc` to
            target '**/*.gradle', '**/*.md', '**/*.gitignore'

            // define the steps to apply to those files
            trimTrailingWhitespace()
            indentWithSpaces()
            endWithNewline()
        }
        kotlin {
            target '**/*.kt'
            ktlint()
        }
        java {
            // apply a specific flavor of google-java-format
            googleJavaFormat('1.10.0').aosp().reflowLongStrings()
            // fix formatting of type annotations
            formatAnnotations()
        }
    }
}

ext {
    developLocal = System.getProperty("developLocal", "true").toBoolean()
    packageGroupId = 'com.bitmovin.analytics'

    /**
     * Not relevant for us as versionCode is used only by PlayStore to indicate updates of apps,
     * but we publish artifacts to maven repositories
     */
    versionCode = 122003

    version = System.getProperty("version", "0.0.0") + (developLocal ? '-local' : '')

    // minSdkVersion we officially support is 21
    // Emulators need to have at least API level 25, since lower don't emulate
    // the media stack correctly
    // (ref: https://developer.android.com/guide/topics/media/exoplayer/supported-devices)
    minSdkVersion = 21

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    jvmTarget = JavaVersion.VERSION_1_8.toString()
    exampleAppJvmTarget = jvmTarget

    compileSdk = 35
    amazonIvsMinSdkVersion = 21
    targetSdkVersion = 35

    // player versions
    bitmovinPlayerVersion = '3.104.2'
    exoplayerVersion = '2.19.1'
    amazonIvsPlayerVersion = '1.38.0'
    media3PlayerVersion = '1.5.1'

    // collector dependencies
    gsonVersion = '2.11.0'
    okhttp3Version = '4.12.0'
    appCompatVersion = '1.6.1' // required for bitmovin player and @Keep annotation in core collector to avoid proguard issues
    coroutinesVersion = "1.8.1"

    // example apps dependencies
    playServicesAdsVersion = '19.8.0'
    imaSdkVersion = '3.31.0'
    constraintlayoutVersion = '2.1.4'
    multidexVersion = '2.0.1'
    workRuntimeKtxVersion = '2.9.0'

    // test dependencies
    testRunnerVersion = '1.6.2'
    mockitoCoreVersion = '5.14.2'
    junitVersion = '4.13.2'
    junitXVersion = '1.1.5'
    mockkVersion = '1.13.13'
    assertjCoreVersion = '3.26.3'
    robolectricVersion = '4.14.1'
    testCoreXVersion = '1.6.1'
}

tasks.register('createPrePushHook') {
    def gitDirStream = new ByteArrayOutputStream()
    exec {
        commandLine "git", "rev-parse", "--git-dir"
        workingDir = project.rootDir
        standardOutput = gitDirStream
    }
    def gitDir = project.file(gitDirStream.toString().trim())
    def gitHooksDirectory = new File(gitDir, "/hooks/")
    if (!gitHooksDirectory.exists()) gitHooksDirectory.mkdirs()
    def prePushHookFile = new File(gitDir, "/hooks/pre-push")
    if (prePushHookFile.exists()) prePushHookFile.delete()
    prePushHookFile.text = """
    #!/bin/sh

    echo '[git hook] executing gradle spotlessCheck before push'

    oldsha=\$(git rev-parse -q --verify refs/stash)
    # stash any unstaged changes
    git stash save --keep-index --include-untracked
    newsha=\$(git rev-parse -q --verify refs/stash)

    # run the spotlessCheck with the gradle wrapper
    ./gradlew spotlessCheck --daemon

    # store the last exit code in a variable
    RESULT=\$?

    # unstash the unstaged changes
    if [ "\$oldsha" != "\$newsha" ];
    then
        echo 'Popping stash as there have been changes before.'
        git stash pop;
    fi

    # return the './gradlew spotlessCheck' exit code
    exit \$RESULT
"""
    "chmod +x .git/hooks/pre-push".execute()
}

test {
    useJUnitPlatform()
}

// SonarQube configuration

sonar {
    properties {
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.organization", "bitmovin-engineering"
        property "sonar.projectName", "Analytics Collector Android"
        property "sonar.projectKey", "bitmovin-engineering_bitmovin-analytics-collector-android-internal"
        property "sonar.tests", ["src/test"]
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.sources", "src/main"
        property "sonar.exclusions", "**/R.class,**/*Generated.java,**/*Test*/**"
        property "sonar.junit.reportPaths", "build/test-results/testDebugUnitTest"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/jacocoTestReportBitmovinTesting/jacocoTestReportBitmovinTesting.xml"
        property "sonar.verbose", "true"
        property "sonar.java.coveragePlugin", "jacoco" // Please refer to the jacoco.gradle file to understand how the jacoco report is generated.
    }
}

def nonSonarProjects = ["collector-bitmovin-player-example",
                        "collector-bitmovin-player-tv-example",
                        "collector-exoplayer-example",
                        "collector-amazon-ivs-example",
                        "collector-media3-exoplayer-example",
                        "example-shared",
                        "systemtest-utils"
]
nonSonarProjects.forEach {
    project(":$it") {
        sonar {
            skipProject = true
        }
    }
}

/**
 * Config for org.jetbrains.kotlinx.binary-compatibility-validator.
 * Documentation : https://kotlin.github.io/binary-compatibility-validator/index.html
 *
 * This plugin is used to ensure binary compatibility on our public APIs between versions.
 * It needs to be run manually for now since collector has too many public methods
 * ./gradlew apiCheck #runs the check against the current dump (stored in /api/ for each module)
 * ./gradlew apiDump #creates a new dump which we can run against in the future
 */
apiValidation {
    /*
    Sub-projects that are excluded from API validation
    */
    ignoredProjects += ["collector-bitmovin-player-example",
                        "collector-bitmovin-player-tv-example",
                        "collector-exoplayer-example",
                        "collector-amazon-ivs-example",
                        "collector-media3-exoplayer-example",
                        "example-shared",
                        "systemtest-utils"]

    /*
    We can't use the publicPackages property because it doesn't work for some reason.
    We also can't make most of the package private/internal because for technical reasons.
    To check for backwards compatibility, we exclude everything that should not be used by customers.
    */
    ignoredPackages += [
            "com.bitmovin.analytics.adapters",
            "com.bitmovin.analytics.ads",
            "com.bitmovin.analytics.data",
            "com.bitmovin.analytics.enums",
            "com.bitmovin.analytics.error",
            "com.bitmovin.analytics.features",
            "com.bitmovin.analytics.internal",
            "com.bitmovin.analytics.license",
            "com.bitmovin.analytics.persistence",
            "com.bitmovin.analytics.retryBackend",
            "com.bitmovin.analytics.ssai",
            "com.bitmovin.analytics.stateMachines",
            "com.bitmovin.analytics.utils",
    ]

    nonPublicMarkers += [
            "com.bitmovin.analytics.internal.InternalBitmovinApi"
    ]
}

java {
    sourceCompatibility = rootProject.ext.sourceCompatibility
    targetCompatibility = rootProject.ext.targetCompatibility
}
