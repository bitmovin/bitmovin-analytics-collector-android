import com.android.build.api.dsl.ManagedVirtualDevice

apply plugin: 'com.android.library'
apply plugin: 'kotlin-allopen'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-parcelize'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'
apply plugin: 'org.jetbrains.kotlin.plugin.serialization'
apply from: '../jacoco.gradle'
apply from: '../bitmovinpropertiesloader.gradle'

android {
    namespace "com.bitmovin.analytics"
    compileSdk rootProject.ext.compileSdk

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        buildConfigField 'String', 'COLLECTOR_CORE_VERSION', "\"${rootProject.ext.version}\""

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }

    compileOptions {
        sourceCompatibility rootProject.ext.sourceCompatibility
        targetCompatibility rootProject.ext.targetCompatibility
    }

    kotlinOptions {
        jvmTarget = rootProject.ext.jvmTarget
        freeCompilerArgs += "-opt-in=com.bitmovin.analytics.internal.InternalBitmovinApi"
    }

    testOptions {
        // https://developer.android.com/studio/test/gradle-managed-devices
        managedDevices {
            devices {
                pixel6api35 (ManagedVirtualDevice) {
                    // Use device profiles you typically see in Android Studio.
                    device = "Pixel 6"
                    // Use only API levels 27 and higher.
                    apiLevel = 34
                    // google is used since atd and aosp don't support widevine anymore
                    systemImageSource = "google"
                }
                pixel6api30 (ManagedVirtualDevice) {
                    // Use device profiles you typically see in Android Studio.
                    device = "Pixel 6"
                    // Use only API levels 27 and higher.
                    apiLevel = 30
                    systemImageSource = "aosp-atd"
                }
            }
        }
        unitTests.returnDefaultValues = true

        // robolectric setting
        unitTests {
            includeAndroidResources = true
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            consumerProguardFiles 'proguard-consumer-rules.pro'
        }
        debug {
            enableUnitTestCoverage true
            enableAndroidTestCoverage true
        }
    }
    lint {
        abortOnError false
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${rootProject.ext.kotlin_version}"
    implementation "com.squareup.okhttp3:okhttp:${rootProject.ext.okhttp3Version}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${rootProject.ext.coroutinesVersion}"
    implementation "androidx.appcompat:appcompat:${rootProject.ext.appCompatVersion}"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:${rootProject.ext.kotlinxSerialization}"

    // we add the parcelize-runtime dependency explicit here (instead on relying on the kotlin-parcelize plugin)
    // in order to make sure it is added to the pom.xml with runtime scope
    // this is needed to avoid the following errors on minification with r8:
    // "Missing class kotlinx.parcelize.Parcelize (referenced from: com.bitmovin.analytics.api.AnalyticsConfig and 3 other contexts)"
    runtimeOnly "org.jetbrains.kotlin:kotlin-parcelize-runtime:${rootProject.ext.kotlin_version}"

    testImplementation "org.assertj:assertj-core:${rootProject.ext.assertjCoreVersion}"
    testImplementation "org.mockito:mockito-core:${rootProject.ext.mockitoCoreVersion}"
    testImplementation "junit:junit:${rootProject.ext.junitVersion}"
    testImplementation "io.mockk:mockk:${rootProject.ext.mockkVersion}"
    testImplementation "org.robolectric:robolectric:${rootProject.ext.robolectricVersion}"
    testImplementation "androidx.test:core:${rootProject.ext.testCoreXVersion}"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:${rootProject.ext.coroutinesVersion}"

    androidTestImplementation "androidx.test:runner:${rootProject.ext.testRunnerVersion}"
    androidTestImplementation "androidx.test.ext:junit:${rootProject.ext.junitXVersion}"
    androidTestImplementation "org.assertj:assertj-core:${rootProject.ext.assertjCoreVersion}"
    androidTestImplementation project(':systemtest-utils')
}

publishing {
    publications {
        aar(MavenPublication) {
            groupId rootProject.ext.packageGroupId
            version = rootProject.ext.version
            artifactId project.getName()

            // Tell maven to prepare the generated "*.aar" file for publishing
            artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                configurations['implementation'].allDependencies.each {
                    if (it.group == null || it.name == null) {
                        throw new GradleException("Group or name is null for dependency: $it")
                    }

                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }

                configurations['runtimeOnly'].allDependencies.each {
                    if (it.group == null || it.name == null) {
                        throw new GradleException("Group or name is null for dependency: $it")
                    }

                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                    dependencyNode.appendNode('scope', 'runtime')
                }
            }
        }
    }
}

artifactory {
    contextUrl = 'https://bitmovin.jfrog.io/bitmovin'
    publish {
        repository {
            // The Artifactory repository key to publish to
            repoKey = rootProject.ext.version.endsWith('SNAPSHOT') ? 'libs-snapshot-local' : 'libs-release-local'
            username = bitmovinProperties.getProperty('artifactoryUser') // The publisher user name
            password = bitmovinProperties.getProperty('artifactoryPassword') // The publisher password

            maven = true
        }
        defaults {
            // Tell the Artifactory Plugin which artifacts should be published to Artifactory.
            publications('aar')
            publishArtifacts = true

            // Properties to be attached to the published artifacts.
            properties = ['qa.level': 'basic', 'dev.team': 'core']
            // Publish generated POM files to Artifactory (true by default)
            publishPom = true
        }
    }
}
