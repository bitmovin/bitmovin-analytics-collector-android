apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'
apply from: '../bitmovinpropertiesloader.gradle'

android {
    namespace "com.bitmovin.analytics.bitmovin.player"
    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }


    compileOptions {
        sourceCompatibility rootProject.ext.sourceCompatibility
        targetCompatibility rootProject.ext.targetCompatibility
    }

    kotlinOptions {
        jvmTarget = rootProject.ext.jvmTarget
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }

    testOptions {
        // https://developer.android.com/studio/test/gradle-managed-devices
        managedDevices {
            devices {
                pixel6api30 (com.android.build.api.dsl.ManagedVirtualDevice) {
                    // Use device profiles you typically see in Android Studio.
                    device = "Pixel 6"
                    // Use only API levels 27 and higher.
                    apiLevel = 30
                    // To include Google services, use "google-atd".
                    systemImageSource = "aosp-atd"
                }
            }
        }
        unitTests.returnDefaultValues = true
    }
    lint {
        abortOnError false
    }
}

dependencies {
    if (rootProject.ext.developLocal) {
        api project(':collector')
    } else {
        api "com.bitmovin.analytics:collector:${rootProject.ext.version}"
    }

    api "com.bitmovin.player:player:${rootProject.ext.bitmovinPlayerVersion}"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${rootProject.ext.kotlin_version}"

    // app compat is needed for the bitmovin player in the expanded_controller.xml
    // otherwise processDebugAndroidTestResources is failing
    implementation "androidx.appcompat:appcompat:${rootProject.ext.appCompatVersion}"

    testImplementation "junit:junit:${rootProject.ext.junitVersion}"
    testImplementation "org.assertj:assertj-core:${rootProject.ext.assertjCoreVersion}"
    testImplementation "org.mockito:mockito-inline:${rootProject.ext.mockitoCoreVersion}"
    testImplementation "io.mockk:mockk:${rootProject.ext.mockkVersion}"

    androidTestImplementation "com.bitmovin.player:player:${rootProject.ext.bitmovinPlayerVersion}"
    androidTestImplementation "androidx.test:runner:${rootProject.ext.testRunnerVersion}"
    androidTestImplementation "androidx.test.ext:junit:${rootProject.ext.junitXVersion}"
    androidTestImplementation "org.assertj:assertj-core:${rootProject.ext.assertjCoreVersion}"
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.1"

    androidTestImplementation project(':example-shared')
    androidTestImplementation project(':systemtest-utils')
}

publishing {
    publications {
        aar(MavenPublication) {
            groupId rootProject.ext.packageGroupId
            version = rootProject.ext.version
            artifactId project.getName()

            // Tell maven to prepare the generated "*.aar" file for publishing
            artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                //Defining configuration names from which dependencies will be taken (debugCompile or releaseCompile and compile)
                def configurationNames = ['api']

                configurationNames.each { configurationName ->
                    configurations[configurationName].allDependencies.each {

                        if (it.group == null || it.name == null) {
                            return
                        }

                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}

artifactory {
    contextUrl = 'https://bitmovin.jfrog.io/bitmovin'
    publish {
        repository {
            // The Artifactory repository key to publish to
            repoKey = rootProject.ext.version.endsWith('SNAPSHOT') ? 'libs-snapshot-local' : 'libs-release-local'
            username = bitmovinProperties.getProperty('artifactoryUser') // The publisher user name
            password = bitmovinProperties.getProperty('artifactoryPassword') // The publisher password

            maven = true
        }
        defaults {
            // Tell the Artifactory Plugin which artifacts should be published to Artifactory.
            publications('aar')
            publishArtifacts = true

            // Properties to be attached to the published artifacts.
            properties = ['qa.level': 'basic', 'dev.team': 'core']
            // Publish generated POM files to Artifactory (true by default)
            publishPom = true
        }
    }
}
